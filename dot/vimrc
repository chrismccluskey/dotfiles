" Base: https://gist.github.com/celso/6cefedb9fce92827ee38e8f7411b8b30
syntax on
set ruler               " Show the line and column numbers of the cursor.
set formatoptions+=o    " Continue comment marker in new lines.
set textwidth=0         " Hard-wrap long lines as you type them.
set modeline            " Enable modeline.
"set esckeys             " Cursor keys in insert mode.
set linespace=0         " Set line-spacing to minimum.
set nojoinspaces        " Prevents inserting two spaces after punctuation on a join (J)
" More natural splits
set splitbelow          " Horizontal split below current.
set splitright          " Vertical split to right of current.
if !&scrolloff
  set scrolloff=3       " Show next 3 lines while scrolling.
endif
if !&sidescrolloff
  set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set display+=lastline
set nostartofline       " Do not jump to first character with page commands.
set noerrorbells                " No beeps
set backspace=indent,eol,start  " Makes backspace key more powerful.
set showcmd                     " Show me what I'm typing
set showmode                    " Show current mode.
set noswapfile                  " Don't use swapfile
set nobackup            	" Don't create annoying backup files
set encoding=utf-8              " Set default encoding to UTF-8
set autowrite                   " Automatically save before :next, :make etc.
set autoread                    " Automatically reread changed files without asking me anything
set laststatus=2
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set showmatch                   " Do not show matching brackets by flickering
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not when search pattern contains upper case characters
set autoindent
set tabstop=4 shiftwidth=4 expandtab
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set magic               " Use 'magic' patterns (extended regular expressions).

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Search and Replace
nmap <Leader>s :%s//g<Left><Left>

" Leader key is like a command prefix. 
let mapleader='z'
let maplocalleader='\'

let g:python_host_prog="/usr/local/bin/python2.7"

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

" set cursorcolumn
nmap <Space> <PageDown>
vmap <BS> x

" cd ~/.config/nvim/spell
" wget http://ftp.vim.org/vim/runtime/spell/pt.utf-8.spl
" set spell spelllang=pt_pt
" zg to add word to word list
" zw to reverse
" zug to remove word from word list
" z= to get list of possibilities
" set spellfile=~/.config/nvim/spellfile.add
set nospell

" Plugins here
call plug#begin('~/.config/nvim/plugged')
Plug 'tpope/vim-sensible'
if (has("nvim"))
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
endif
" Plug 'Shougo/deoplete.nvim'
"Plug 'Valloric/YouCompleteMe'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Chiel92/vim-autoformat'
Plug 'scrooloose/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'StanAngeloff/php.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug '2072/PHP-Indenting-for-VIm'
Plug 'rayburgemeestre/phpfolding.vim'
Plug 'mileszs/ack.vim'
Plug 'jceb/vim-orgmode'
Plug 'inkarkat/vim-SyntaxRange'
Plug 'mattn/calendar-vim'
Plug 'chrisbra/NrrwRgn'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'majutsushi/tagbar'
Plug 'yegappan/taglist'
Plug 'dhruvasagar/vim-dotoo'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'terryma/vim-multiple-cursors'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'amix/vim-zenroom2'
Plug 'junegunn/goyo.vim'
Plug 'dense-analysis/ale'
Plug 'ludovicchabant/vim-gutentags'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'phpactor/phpactor' ,  {'do': 'composer install', 'for': 'php'}
Plug 'ncm2/ncm2'
Plug 'phpactor/ncm2-phpactor'
Plug 'adoy/vim-php-refactoring-toolbox'
Plug 'tobyS/pdv'
call plug#end()

" deoplete config
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 1
if has("gui_running")
    inoremap <silent><expr><C-Space> deoplete#mappings#manual_complete()
else
    inoremap <silent><expr><C-@> deoplete#mappings#manual_complete()
endif

" UltiSnips config
if (has("nvim"))
	inoremap <silent><expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
	let g:UltiSnipsExpandTrigger="<tab>"
	let g:UltiSnipsJumpForwardTrigger="<tab>"
	let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

" Tell Vim which characters to show for expanded TABs,
" trailing whitespace, and end-of-lines. VERY useful!
if &listchars ==# 'eol:$'
  " set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  set listchars=tab:>\ ,extends:>,precedes:<,nbsp:+
endif

" nerdtree config
map <C-n> :NERDTreeToggle<CR>

" airline settings
let g:airline#extensions#tabline#enabled = 2
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = '|'
let g:airline_powerline_fonts=1
let g:airline_left_sep = ' '
let g:airline_left_alt_sep = '|'
let g:airline_right_sep = ' '
let g:airline_right_alt_sep = '|'
let g:airline_powerline_fonts=1
"let g:airline_theme='gruvbox'
"let g:airline_theme='palenight'
let g:airline_theme='zenburn'

" Multicursor
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-e>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_quit_key='<Esc>'

" YouCompleteMe
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_min_num_of_chars_for_completion = 1

" Other
set mouse=
set list

" Theme
"colorscheme gruvbox
if (has("nvim"))
	colorscheme zenburn 
else
	colorscheme palenight
endif
highlight SignColumn guibg=#272822
let g:rehash256 = 1
let g:molokai_original=1
let NERDTreeIgnore = ['_site']

" Buffer handling
nmap L :let &number=1-&number<CR>
nmap <leader>l :bnext<CR>
nmap <c-h> :bprevious<CR>
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bl :ls<CR>
nmap <leader>0 :set invnumber<CR>
" map :q to byffer delete
" http://stackoverflow.com/questions/7513380/vim-change-x-function-to-delete-buffer-instead-of-save-quit
cnoreabbrev <expr> q getcmdtype() == ":" && (getcmdline() == 'q' && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) > 1) ? 'bd' : 'q'

" My customizations
set background=dark
if (has("nvim"))
	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
inoremap kj <Esc>
set noet
set cursorcolumn
set cursorline
set number
"set relativenumber

" Change current working directory to directory of open file automatically
" set autochdir " this may fail with some plugins
autocmd BufEnter * silent! lcd %:p:h " this might be a better approach that works with more plugins

" A Better NerdTree Setup - https://medium.com/@victormours/a-better-nerdtree-setup-3d3921abc0b9
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
let NERDTreeQuitOnOpen = 1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif " close tab if only remaining window is nerdtree
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeWinSize = 50

" set Vim-specific sequences for RGB colors
if (has("termguicolors"))
	set termguicolors
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
filetype plugin indent on " required

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

"Ctrl-P
let g:ctrlp_map = "<c-p>"
let g:ctrlp_cmd = "CtrlPMixed"
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 30000

set tags=tags
nnoremap <silent> <Leader>t :TagbarToggle<CR>

" If php-cs-fixer is in $PATH, you don't need to define line below
" let g:php_cs_fixer_path = "~/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar

" If you use php-cs-fixer version 1.x
let g:php_cs_fixer_level = "symfony"                   " options: --level (default:symfony)
let g:php_cs_fixer_config = "default"                  " options: --config
" If you want to define specific fixers:
"let g:php_cs_fixer_fixers_list = "linefeed,short_tag" " options: --fixers
"let g:php_cs_fixer_config_file = '.php_cs'            " options: --config-file
" End of php-cs-fixer version 1 config params

" If you use php-cs-fixer version 2.x
let g:php_cs_fixer_rules = "@PSR2"          " options: --rules (default:@PSR2)
"let g:php_cs_fixer_cache = ".php_cs.cache" " options: --cache-file
"let g:php_cs_fixer_config_file = '.php_cs' " options: --config
" End of php-cs-fixer version 2 config params

let g:php_cs_fixer_php_path = "php"               " Path to PHP
let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.

" default mapping is <leader>pcd
" nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
" nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>

" If you want to add fix on save functionality, add this string to the end of ~/.vimrc:

autocmd BufWritePost *.php silent! call PhpCsFixerFixFile()


" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

" NOTE: you need to install completion sources to get completions. Check
" our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki

" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
" set shortmess+=c

" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
" inoremap <c-c> <ESC>

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
" inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Use <TAB> to select the popup menu:
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" wrap existing omnifunc
" Note that omnifunc does not run in background and may probably block the
" editor. If you don't want to be blocked by omnifunc too often, you could
" add 180ms delay before the omni wrapper:
"  'on_complete': ['ncm2#on_complete#delay', 180,
"               \ 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
" au User Ncm2Plugin call ncm2#register_source({
" 		\ 'name' : 'css',
" 		\ 'priority': 9,
" 		\ 'subscope_enable': 1,
" 		\ 'scope': ['css','scss'],
" 		\ 'mark': 'css',
" 		\ 'word_pattern': '[\w\-]+',
" 		\ 'complete_pattern': ':\s*',
" 		\ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
" 		\ })

"autocmd BufEnter * call ncm2#enable_for_buffer()
"set completeopt=noinsert,menuone,noselect
"
"If you want to disable the default mapping just add this line in your ~/.vimrc file
"
"let g:vim_php_refactoring_use_default_mapping = 0
"
"If you want to disable the user validation at the getter/setter creation, just add this line in your ~/.vimrc file
"
"let g:vim_php_refactoring_auto_validate_sg = 1
"
"If you want to disable the user validation at getter only creation, just add this line in your ~/.vimrc file
"
"let g:vim_php_refactoring_auto_validate_g = 1
"
"If you want to disable the user validation for all rename features, just add this line in your ~/.vimrc file
"
"let g:vim_php_refactoring_auto_validate_rename = 1
"
"If you want to disable the user validation for the visibility (private/public) add this line in your ~/.vimrc file
"
"let g:vim_php_refactoring_auto_validate_visibility = 1
"
"To change the default visibility add one/both of those lines in your ~/.vimrc file
"
"let g:vim_php_refactoring_default_property_visibility = 'private'
"let g:vim_php_refactoring_default_method_visibility = 'private'
"
"To enable fluent setters add either of these lines to your ~/.vimrc file
"
"" default is 0 -- disabled
"
"" to enable for all setters
"let g:vim_php_refactoring_make_setter_fluent = 1
"
"" to enable but be prompted when creating the setter
"let g:vim_php_refactoring_make_setter_fluent = 2
"
"Default Mappings
"
"nnoremap <unique> <Leader>rlv :call PhpRenameLocalVariable()<CR>
"nnoremap <unique> <Leader>rcv :call PhpRenameClassVariable()<CR>
"nnoremap <unique> <Leader>rm :call PhpRenameMethod()<CR>
"nnoremap <unique> <Leader>eu :call PhpExtractUse()<CR>
"vnoremap <unique> <Leader>ec :call PhpExtractConst()<CR>
"nnoremap <unique> <Leader>ep :call PhpExtractClassProperty()<CR>
"vnoremap <unique> <Leader>em :call PhpExtractMethod()<CR>
"nnoremap <unique> <Leader>np :call PhpCreateProperty()<CR>
"nnoremap <unique> <Leader>du :call PhpDetectUnusedUseStatements()<CR>
"vnoremap <unique> <Leader>== :call PhpAlignAssigns()<CR>
"nnoremap <unique> <Leader>sg :call PhpCreateSettersAndGetters()<CR>
"nnoremap <unique> <Leader>cog :call PhpCreateGetters()<CR>
"nnoremap <unique> <Leader>da :call PhpDocAll()<CR>
"
